@implements IDisposable
@rendermode @(new InteractiveServerRenderMode(prerender: false))

<div class="top-row ps-3 navbar navbar-dark">
	<div class="container-fluid">
		<a class="navbar-brand" href="">YapHaydi <i class="bi-house" /></a>
	</div>
</div>

<input type="checkbox" title="Navigation menu" class="navbar-toggler" />

<div class="nav-scrollable" onclick="document.querySelector('.navbar-toggler').click()">
	<nav class="flex-column">


		<div class="nav-item px-3">
			<NavLink class="nav-link" href="counter" Match="NavLinkMatch.All">
				<span class="bi bi-plus-square-fill-nav-menu" aria-hidden="true"></span> Counter
			</NavLink>
		</div>

		<div class="nav-item px-3">
			<NavLink class="nav-link" href="orderypnpending">
				<span class="material-symbols-outlined pr-2">cycle</span>
				Aktif
			</NavLink>
		</div>

		<div class="nav-item px-3">
			<NavLink class="nav-link" href="orderypndone">
				<span class="material-symbols-outlined pr-2 text-lg">done_all</span>
				Arşiv
			</NavLink>
		</div>

		@if (string.IsNullOrEmpty(UsrTkn))
		{
			<div class="nav-item px-3">
				<NavLink class="nav-link" href="/login">
					<span class="material-symbols-outlined pr-2">login</span>
					Login
				</NavLink>
			</div>
		}
		else
		{
			<div class="nav-item px-3">
				<NavLink class="nav-link" href=@($"logout/{@rLCV.UEXId}")>
					<span class="material-symbols-outlined pr-2">logout</span>
					Logout
				</NavLink>
			</div>
		}
	</nav>
</div>

<style>
	
	span.sz-48 {
		font-size: 48px;
		font-variation-settings: 'OPSZ' 48;
	}
</style>

@code {
	[Inject]
	IDataAccess db { get; set; }

	[Inject]
	NavigationManager Nav { get; set; }

	[Inject]
	CascadingValueSource<RLCV>? RLCVsource { get; set; } = default;

	[CascadingParameter]
	public RLCV? rLCV { get; set; } = default;

	[Parameter]
	public string? UsrTkn { get; set; } = default;

	public void Dispose()
	{
		var usr = db.LoadRec<ULE, dynamic>("select * from UEX_EXIT(@UEXId)", new { UEXId = rLCV.UEXId });
	}



	protected override void OnInitialized()
	{
		if (!string.IsNullOrWhiteSpace(UsrTkn))
		{
			var usr = db.LoadRec<ULE, dynamic>("select * from UEX_ENTER(@Tkn)", new { Tkn = UsrTkn });
			if (usr != null)
			{
				if (usr.UsrId > 0)
				{
					rLCV.UsrTkn = UsrTkn;
					rLCV.UsrId = usr.UsrId;
					rLCV.UEXId = usr.UEXId;
					rLCV.FrmId = usr.FFId;
				}
				else
				{
					UsrTkn = "";
				}
			}
		}
	}

	public sealed class UsrPLS
	{
		public int usrid { get; set; }
		public string usrpwd { get; set; }
	}
}