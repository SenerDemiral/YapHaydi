@rendermode @(new InteractiveServerRenderMode(prerender: true))

@inject INews News
@inject NavigationManager NM 
@implements IDisposable

@page "/orderypndone"

<PageTitle>FirmaArşivOrders</PageTitle>

<div class="@pointerEvent">
	@if (ww != null)
	{
		<table class="mx-auto text-left text-gray-500">
		<thead class="text-xs text-gray-700 bg-gray-50">
			<tr class="text-center">
				<th></th>
				<th>Id</th>
				<th>Konu</th>
				<th>İsteyen</th>
				<th>YapanDpt</th>
				<th>YapanKişi</th>
				<th>Başlangıç</th>
				<th>±S</th>
				<th>Bitiş</th>
				<th>±S</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var w in ww)
			{
				<tr>
					<td class="border border-slate-300">
						<button class="bg-indigo-500 text-white rounded px-1"
								@onclick="() => ShowModal(w.WWID)">
							<span class="material-symbols-outlined">input</span>
						</button>
					</td>
					<td class="border border-slate-300 px-1">@w.WWID</td>
					<td class="border border-slate-300 px-1">@w.Sbj</td>
					<td class="border border-slate-300 px-1">@w.rWho</td>
					<td class="border border-slate-300 px-1">@w.mDpt</td>
					<td class="border border-slate-300 px-1">@w.mWho</td>
					<td class="border border-slate-300 px-1">@w.SADfs</td>
					<td class="border border-slate-300 px-1 text-right">@w.sdh</td>
					<td class="border border-slate-300 px-1">@w.FADfs</td>
					<td class="border border-slate-300 px-1 text-right">@w.fdh</td>
				</tr>
			}
		</tbody>
	</table>
	}
</div>

@if (showModal)
{
    <div class="modal modal-ww shadow-lg shadow-black rounded">
        <InpWW ID=@mdlId OnSaved="Saved" OnCancelled="Cancelled" />
    </div>
}

@code {
	[Inject]
	IDataAccess db { get; set; }

	[CascadingParameter]
	public AppState? appState { get; set; } = default;

	public IEnumerable<WW> ww;

	private int mdlId;
	private string pointerEvent = "pe-auto";

	private bool _showModal;
	private bool showModal
	{
		get => _showModal;
		set
		{
			_showModal = value;
			pointerEvent = _showModal ? "pe-none" : "pe-auto";
		}
	}
	private void ShowModal(int id)
	{
		if (showModal)
			showModal = false;
		else
		{
			this.mdlId = id;
			showModal = true;
		}
	}
	public void Cancelled()
	{
		showModal = false;
	}
	public void Saved()
	{
		showModal = false;
		LoadData();
	}

	public void Started(WW w)
	{
		w.SAD = DateTime.Now;
		w.UpdateSoF = 1;
		w.UpdatePending = true;
	}

	public void UpdRec(WW w)
	{
		string S_F = "";
		if (w.UpdateSoF == 1)
			S_F = "S";
		else if (w.UpdateSoF == 2)
			S_F = "F";

		var xx = db.LoadRec<XX, dynamic>("select * from DBA_UPD(@WWID, @S_F)", new { WWID = w.WWID, S_F = S_F });

		w.SAD = xx.SAD;
		w.FAD = xx.FAD;
		w.sClass = xx.sClass;
		w.fClass = xx.fClass;

		w.UpdatePending = false;
	}

	public void Finished(WW w)
	{
		if (w.SAD is null)
			w.SAD = DateTime.Now;

		w.FAD = DateTime.Now;
		w.UpdateSoF = 2;
		w.UpdatePending = true;
	}

	private void LoadData()
	{
		ww = db.LoadData<WW, dynamic>("select * from DBD_YPN(@ID)", new { ID = appState.UsrId });
	}

	protected override void OnParametersSet()
	{
		if(appState.UsrId > 0 && appState.Ytk1)
			LoadData();
		base.OnParametersSet();
	}
	protected override void OnInitialized()
	{
		News.OnChange += NewsChanged;
	}
	public void NewsChanged(NewsMdl news)
	{
		if (news.FrmId == appState.FrmId) 
		{
			LoadData();
			InvokeAsync(StateHasChanged);
		}
	}
	public void Dispose()
	{
		News.OnChange -= NewsChanged;
	}

	public sealed class XX
	{
		public DateTime? SAD;
		public DateTime? FAD;
		public string sClass;
		public string fClass;
	}
}
