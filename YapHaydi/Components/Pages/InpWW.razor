@inject INewsContainer News
@inject NavigationManager NM 
@inject IDataAccess db
@rendermode @(new InteractiveServerRenderMode(prerender: false))
@* @page "/inp/{id:int}" *@

<div class="@pointerEvent">
    @if(ww is not null) {
    <div class="flex justify-between text-sm">
        <button disabled="@RO" @onclick="Cancel">⬅️</button>
		@if (appState.Ytk1)
        {
            <button disabled="@RO" @onclick="Clone">🐑Klon</button>
            <button disabled="@RO" @onclick="NewRec">➕</button>
            <button disabled="@RO" @onclick="Save">✅Kaydet</button>
        }
    </div>
    
    <table >
        <tbody>
        <tr>
            <td>Id</td>
            <td>@ww.WWID</td>
        </tr>
        <tr>
            <td><button @onclick="() => ShowModal(ww.SbjID)" tabindex="-1">Konu</button></td>
            <td>
                <input type="text" 
                       maxlength="30"
                       size="30"
                       list="TTSL"
                       @bind="ww.Sbj"
                       @bind:event="onchange"
                       @bind:after="(() => CheckTTS(ref ww.SbjID, ref ww.Sbj, oww!.Sbj))" />
             </td>
        </tr>
        <tr>
            <td colspan="2" style="background-color:gray;color:antiquewhite;text-align:center">Request</td>
        </tr>
        <tr>
            <td><button @onclick="() => ShowModal(ww.rWhoID)" tabindex="-1">Kim</button></td>
            <td>
                <input type="text" 
                       maxlength="30"
                       size="30"
                       list="TTXL"
                       @bind="ww.rWho"
                       @bind:event="onchange"
                       @bind:after="(() => CheckTTX(ref ww.rWhoID, ref ww.rWho, oww!.rWho))" />
             </td>
        </tr>
        <tr>
            <td>Info</td>
            <td>
                <textarea readonly="@RO"
                          rows="4" cols="30"
                          @bind="ww.rInf" 
                          style="resize:vertical;height:42px" />
            </td>
        </tr>
        <tr>
            <td colspan="2" style="background-color:gray;color:antiquewhite;text-align:center">Yapan</td>
        </tr>
        <tr>
            <td><button @onclick="() => ShowModal(ww.mDptID)" tabindex="-1">Dept</button></td>
            <td>
                <input type="text" 
                       maxlength="30"
                       size="30"
                       list="TTDL"
                       @bind="ww.mDpt"
                       @bind:event="onchange"
                       @bind:after="(() => CheckTTD(ref ww.mDptID, ref ww.mDpt, oww!.mDpt))" />
             </td>
        </tr>
        <tr>
            <td><button @onclick="() => ShowModal(ww.mWhoID)" tabindex="-1">Kişi</button></td>
            <td>
                <input type="text" 
                       maxlength="30"
                       size="30"
                       list="TTXL"
                       @bind="ww.mWho"
                       @bind:event="onchange"
                       @bind:after="(() => CheckTTX(ref ww.mWhoID, ref ww.mWho, oww!.mWho))" />
             </td>
        </tr>
        <tr>
            <td colspan="2" style="background-color:gray;color:antiquewhite;text-align:center">Başlangıç</td>
        </tr>
        <tr>
            <td><button @onclick="() => ShowModal(ww.sCntID)" tabindex="-1">Kontak</button></td>
            <td>
                <input type="text" 
                       maxlength="30"
                       size="30"
                       list="TTXL"
                       @bind="ww.sCnt"
                       @bind:event="onchange"
                       @bind:after="(() => CheckTTX(ref ww.sCntID, ref ww.sCnt, oww!.sCnt))" />
             </td>
        </tr>
        <tr>
            <td><button @onclick="() => ShowModal(ww.sAdrID)" tabindex="-1">Adres</button></td>
            <td>
                <input type="text" 
                       maxlength="30"
                       size="30"
                       list="TTXL"
                       @bind="ww.sAdr"
                       @bind:event="onchange"
                       @bind:after="(() => CheckTTX(ref ww.sAdrID, ref ww.sAdr, oww!.sAdr))" />
             </td>
        </tr>
        <tr>
            <td></td>
            <td>@ww.sAdres</td>
        </tr>
        <tr>
            <td>Tahmini</td>
            <td><input readonly="@RO" type="date" @bind="ww.SED" />
                <input readonly="@RO" type="time" @bind="ww.SEDt" />
            </td>
        </tr>
        <tr>
            <td>Gerçek</td>
            <td>@ww.SADfs</td>
        </tr>
        <tr>
            <td>Info</td>
            <td>
                <textarea readonly="@RO"
                          rows="4" cols="30"
                          @bind="ww.sInf" 
                          style="resize:vertical;height:42px" />
            </td>
        </tr>
        <tr>
            <td colspan="2" style="background-color:gray;color:antiquewhite;text-align:center">Bitiş</td>
        </tr>
        <tr>
            <td><button @onclick="() => ShowModal(ww.fCntID)" tabindex="-1">Kontak</button></td>
            <td>
                <input type="text" 
                       maxlength="30"
                       size="30"
                       list="TTXL"
                       @bind="ww.fCnt"
                       @bind:event="onchange"
                       @bind:after="(() => CheckTTX(ref ww.fCntID, ref ww.fCnt, oww!.fCnt))" />
             </td>
        </tr>
        <tr>
            <td><button @onclick="() => ShowModal(ww.fAdrID)" tabindex="-1">Adres</button></td>
            <td>
                <input type="text" 
                       maxlength="30"
                       size="30"
                       list="TTXL"
                       @bind="ww.fAdr"
                       @bind:event="onchange"
                       @bind:after="(() => CheckTTX(ref ww.fAdrID, ref ww.fAdr, oww!.fAdr))" />
             </td>
        </tr>
        <tr>
            <td></td>
            <td style="width:200px">@ww.fAdres</td>
        </tr>
        <tr>
            <td>Tahmini</td>
            <td><input readonly="@RO" type="date" @bind="ww.FED" />
                <input readonly="@RO" type="time" @bind="ww.FEDt" />
            </td>
        </tr>
        <tr>
            <td>Gerçek</td>
            <td>@ww.FADfs</td>
        </tr>
        <tr>
            <td>Info</td>
            <td>
                <textarea readonly="@RO"
                          rows="4" cols="30"
                          @bind="ww.fInf" 
                          style="resize:vertical;height:42px" />
            </td>
        </tr>
        <tr>
            <td colspan="2" style="background-color:gray;color:antiquewhite;text-align:center">Destinasyon</td>
        </tr>
        <tr>
            <td><button @onclick="() => ShowModal(ww.dCntID)" tabindex="-1">Kontak</button></td>
            <td>
                <input type="text" 
                       maxlength="30"
                       size="30"
                       list="TTXL"
                       @bind="ww.dCnt"
                       @bind:event="onchange"
                       @bind:after="(() => CheckTTX(ref ww.dCntID, ref ww.dCnt, oww!.dCnt))" />
             </td>
        </tr>
        <tr>
            <td><button @onclick="() => ShowModal(ww.dAdrID)" tabindex="-1">Adres</button></td>
            <td>
                <input type="text" 
                       maxlength="30"
                       size="30"
                       list="TTXL"
                       @bind="ww.dAdr"
                       @bind:event="onchange"
                       @bind:after="(() => CheckTTX(ref ww.dAdrID, ref ww.dAdr, oww!.dAdr))" />
             </td>
        </tr>
        </tbody>
    </table>


    <datalist id="TTXL">
        @foreach (var r in ttx!)
        {
            <option value="@r.Key" />
        }
    </datalist>

    <datalist id="TTSL">
        @foreach (var r in tts!)
        {
            <option value="@r.Key" />
        }
    </datalist>

    <datalist id="TTDL">
        @foreach (var r in ttd!)
        {
            <option value="@r.Key" />
        }
    </datalist>
}
</div>

@if (showModal)
{
	<div class="modal modal-tt h-auto  shadow-lg shadow-black rounded">
		<InpTT TTId=@inpTTid OnSaved="Saved" OnCancelled="Cancelled" />
	</div>
}

@code {
    [CascadingParameter] 
    public AppState appState { get; set; }
    [Inject] 
    CascadingValueSource<AppState>? appStateCource { get; set; } = default;
    [Parameter] 
    public int ID { get; set; }
    [Parameter] 
    public EventCallback OnSaved { get; set; }
    [Parameter] 
    public EventCallback OnCancelled { get; set; }

    private WW? ww, oww;
    private bool RO = false;
    private int FFID;
    private Dictionary<string, int?>? ttx, tts, ttd;

    private int inpTTid;
    private string pointerEvent = "pe-auto";
    private bool _showModal;
    private bool showModal
    {
        get => _showModal;
        set
        {
            _showModal = value;
            pointerEvent = _showModal ? "pe-none" : "pe-auto";
        }
    }
    private void ShowModal(int? ttId)
    {
        ttId ??= 0;

        if (showModal)
            showModal = false;
        else
        {
            this.inpTTid = (int) ttId;
            showModal = true;
        }
    }
    public void Cancelled()
    {
        showModal = false;
    }
    public void Saved()
    {
        showModal = false;
        LoadLookups();
        //LoadData();

    }


    private void CheckTTX(ref int? id, ref string? adx, string? oadx)
    {
        if (ttx!.TryGetValue(adx!, out var nid))
        {
            id = nid;
        }
        else
        {
            adx = oadx;
        }
    }

    private void CheckTTS(ref int? id, ref string? adx, string? oadx)
    {
        if (tts!.TryGetValue(adx!, out var nid))
        {
            id = nid;
        }
        else
        {
            adx = oadx;
        }
    }

    private void CheckTTD(ref int? id, ref string? adx, string? oadx)
    {
        if (ttd!.TryGetValue(adx!, out var nid))
        {
            id = nid;
        }
        else
        {
            adx = oadx;
        }
    }

    private void Cancel()
    {
        //appStateSource?.NotifyChangedAsync();

        // zaten buradan geri dönecek, ilk değerlerini geri almaya gerek yok. ww = oww Bu çalışmaz birbirine eşitliyor copy yapmıyor;
        // ww = oww.ShallowCopy(); //Gerekirse bu OK 
        OnCancelled.InvokeAsync();
    }

    private void Clone()
    {
        ww.WWID = 0;
    }

    private void NewRec()
    {
        ww = new();
        oww = new();
    }

    private void Save()
    {
        TimeSpan sedt = ww.SEDt == null ? new TimeSpan(0) : ww.SEDt.Value.TimeOfDay;
        TimeSpan fedt = ww.FEDt == null ? new TimeSpan(0) : ww.FEDt.Value.TimeOfDay;

        // Join Date & Time (SED.Date + SED.Time)
        DateTime? sed = null, fed = null;
        if(ww.SED != null)
            sed = ww?.SED?.Date.Add(sedt);
        if(ww.FED != null)
            fed = ww?.FED?.Date.Add(fedt);

        var ppm = new   // Sirasi onemli Procedure Input sirasiyla ayni olmali
        {
            WWID = ww.WWID,
            USRID = appState.UsrId,
            FFID = appState.FrmId,
            SBJID = ww.SbjID,
            RWHOID = ww.rWhoID,
            RINF = ww.rInf,
            MDPTID = ww.mDptID,
            MWHOID = ww.mWhoID,
            SCNTID = ww.sCntID,
            SADRID = ww.sAdrID,
            SINF = ww.sInf,
            SED = sed,
            SAD = ww.SAD,
            FCNTID = ww.fCntID,
            FADRID = ww.fAdrID,
            FINF = ww.fInf,
            FED = fed,
            FAD = ww.FAD,
            DCNTID = ww.dCntID,
            DADRID = ww.dAdrID,
            DINF = ww.dInf
        };

        db.SaveRec("WW_MDF", ppm);

        NewsMdl news = new()
		{
			FrmId = appState.FrmId,
			YpnId = ww.mWhoID ?? 0,
		};
        News.NotifyChanged(news);

        OnSaved.InvokeAsync();
    }

    private void LoadLookups()
    {
        FFID = appState.FrmId;
        var tt = db.LoadData<TT, dynamic>("select * from TT_LU(@FFID)", new { FFId = FFID });
        ttx = new();
        tts = new();
        ttd = new();

        ttx.Add("", null);
        foreach(var r in tt)
        {
            if(r.Typ == "X")
            {
                ttx.Add(r.AdX, r.TTId);
            }
            else if(r.Typ == "S")
            {
                tts.Add(r.AdX, r.TTId);
            }
            if(r.Typ == "D")
            {
                ttd.Add(r.AdX, r.TTId);
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        FFID = appState.FrmId;
        LoadLookups();

        //ttx = db.LoadData<TT, dynamic>("select * from TT_LU(@FFID) where Typ='X'", new { FFId = FFID }).ToDictionary((k) => k.AdX);

        //if (ScpC.IsAdm || ScpC.IsTnm)
        ww = db.LoadRec<WW, dynamic>("select * from WW_SEL(@WWId,@FFId,@UsrId)", new { WWId=ID, FFId=FFID, UsrId=1 });
        // else
        // NM.NavigateTo("login");
        //pp = db.LoadRec<PP, dynamic>("select * from PP where PPId = @PPId", new { PPId = PPId });
        oww = ww.ShallowCopy();
    }

    private sealed class TT
    {
        public int TTId { get; set; }
        public string Typ { get; set; }
        public string AdX { get; set; }
    }

}
