@inject NavigationManager NM 
@inject IDataAccess db
@rendermode @(new InteractiveServerRenderMode(prerender: false))
@page "/inp/{id:int}"

<h2 class="text-center">WorkOrder</h2>


@if(ww is not null) {
    <div class="flex justify-between">
        <button disabled="@RO"
                @onclick="Cancel">
            🚫 Vazgeç
        </button>
        <button disabled="@RO"
                @onclick="Clone">
            🐑 Klon
        </button>
        <button disabled="@RO"
                @onclick="NewRec">
            ➕ Yeni
        </button>
        <button disabled="@RO"
                @onclick="Save">
            ✅ Kaydet
        </button>
    </div>
    
    <table class="table-edit">
        <tbody>
        <tr>
            <td>Id</td>
            <td>@ww.WWID</td>
        </tr>
        <tr>
            <td>Konu</td>
            <td>
                <input type="text" 
                       maxlength="30"
                       size="30"
                       list="TTSL"
                       @bind="ww.Sbj"
                       @bind:event="onchange"
                       @bind:after="(() => CheckTTS(ref ww.SbjID, ref ww.Sbj, oww!.Sbj))" />
             </td>
        </tr>
        <tr>
            <td colspan="2" style="background-color:gray;color:antiquewhite;text-align:center">Request</td>
        </tr>
        <tr>
            <td>Kim</td>
            <td>
                <input type="text" 
                       maxlength="30"
                       size="30"
                       list="TTXL"
                       @bind="ww.rWho"
                       @bind:event="onchange"
                       @bind:after="(() => CheckTTX(ref ww.rWhoID, ref ww.rWho, oww!.rWho))" />
             </td>
        </tr>
        <tr>
            <td>Info</td>
            <td>
                <textarea readonly="@RO"
                          rows="4" cols="30"
                          @bind="ww.rInf" 
                          style="resize:vertical;height:42px" />
            </td>
        </tr>
        <tr>
            <td colspan="2" style="background-color:gray;color:antiquewhite;text-align:center">Yapan</td>
        </tr>
        <tr>
            <td>Dept</td>
            <td>
                <input type="text" 
                       maxlength="30"
                       size="30"
                       list="TTDL"
                       @bind="ww.mDpt"
                       @bind:event="onchange"
                       @bind:after="(() => CheckTTD(ref ww.mDptID, ref ww.mDpt, oww!.mDpt))" />
             </td>
        </tr>
        <tr>
            <td>Kişi</td>
            <td>
                <input type="text" 
                       maxlength="30"
                       size="30"
                       list="TTXL"
                       @bind="ww.mWho"
                       @bind:event="onchange"
                       @bind:after="(() => CheckTTX(ref ww.mWhoID, ref ww.mWho, oww!.mWho))" />
             </td>
        </tr>
        <tr>
            <td colspan="2" style="background-color:gray;color:antiquewhite;text-align:center">Başlangıç</td>
        </tr>
        <tr>
            <td>Contact</td>
            <td>
                <input type="text" 
                       maxlength="30"
                       size="30"
                       list="TTXL"
                       @bind="ww.sCnt"
                       @bind:event="onchange"
                       @bind:after="(() => CheckTTX(ref ww.sCntID, ref ww.sCnt, oww!.sCnt))" />
             </td>
        </tr>
        <tr>
            <td>Adres</td>
            <td>
                <input type="text" 
                       maxlength="30"
                       size="30"
                       list="TTXL"
                       @bind="ww.sAdr"
                       @bind:event="onchange"
                       @bind:after="(() => CheckTTX(ref ww.sAdrID, ref ww.sAdr, oww!.sAdr))" />
             </td>
        </tr>
        <tr>
            <td></td>
            <td>@ww.sAdres</td>
        </tr>
        <tr>
            <td>Tahmini</td>
            <td><input readonly="@RO" type="date" @bind="ww.SED" />
                <input readonly="@RO" type="time" @bind="ww.SEDt" />
            </td>
        </tr>
        <tr>
            <td>Gerçek</td>
            <td>@ww.SADfs</td>
        </tr>
        <tr>
            <td>Info</td>
            <td>
                <textarea readonly="@RO"
                          rows="4" cols="30"
                          @bind="ww.sInf" 
                          style="resize:vertical;height:42px" />
            </td>
        </tr>
        <tr>
            <td colspan="2" style="background-color:gray;color:antiquewhite;text-align:center">Bitiş</td>
        </tr>
        <tr>
            <td>Contact</td>
            <td>
                <input type="text" 
                       maxlength="30"
                       size="30"
                       list="TTXL"
                       @bind="ww.fCnt"
                       @bind:event="onchange"
                       @bind:after="(() => CheckTTX(ref ww.fCntID, ref ww.fCnt, oww!.fCnt))" />
             </td>
        </tr>
        <tr>
            <td>Adres</td>
            <td>
                <input type="text" 
                       maxlength="30"
                       size="30"
                       list="TTXL"
                       @bind="ww.fAdr"
                       @bind:event="onchange"
                       @bind:after="(() => CheckTTX(ref ww.fAdrID, ref ww.fAdr, oww!.fAdr))" />
             </td>
        </tr>
        <tr>
            <td></td>
            <td style="width:200px">@ww.fAdres</td>
        </tr>
        <tr>
            <td>Tahmini</td>
            <td><input readonly="@RO" type="date" @bind="ww.FED" />
                <input readonly="@RO" type="time" @bind="ww.FEDt" />
            </td>
        </tr>
        <tr>
            <td>Gerçek</td>
            <td>@ww.FADfs</td>
        </tr>
        <tr>
            <td>Info</td>
            <td>
                <textarea readonly="@RO"
                          rows="4" cols="30"
                          @bind="ww.fInf" 
                          style="resize:vertical;height:42px" />
            </td>
        </tr>
        <tr>
            <td colspan="2" style="background-color:gray;color:antiquewhite;text-align:center">Destinasyon</td>
        </tr>
        <tr>
            <td>Contact</td>
            <td>
                <input type="text" 
                       maxlength="30"
                       size="30"
                       list="TTXL"
                       @bind="ww.sCnt"
                       @bind:event="onchange"
                       @bind:after="(() => CheckTTX(ref ww.sCntID, ref ww.sCnt, oww!.sCnt))" />
             </td>
        </tr>
        <tr>
            <td>Adres</td>
            <td>
                <input type="text" 
                       maxlength="30"
                       size="30"
                       list="TTXL"
                       @bind="ww.dAdr"
                       @bind:event="onchange"
                       @bind:after="(() => CheckTTX(ref ww.dAdrID, ref ww.dAdr, oww!.dAdr))" />
             </td>
        </tr>
        </tbody>
    </table>


    <datalist id="TTXL">
        @foreach (var r in ttx!)
        {
            <option value="@r.Key" />
        }
    </datalist>

    <datalist id="TTSL">
        @foreach (var r in tts!)
        {
            <option value="@r.Key" />
        }
    </datalist>

    <datalist id="TTDL">
        @foreach (var r in ttd!)
        {
            <option value="@r.Key" />
        }
    </datalist>
}

@code {
    [CascadingParameter] 
    public RLCV rLCV { get; set; }
    [Inject] 
    CascadingValueSource<RLCV>? RLCVsource { get; set; } = default;
    [Parameter] 
    public int ID { get; set; }
    [Parameter] 
    public EventCallback OnSaved { get; set; }
    [Parameter] 
    public EventCallback OnCancelled { get; set; }

    private WW? ww, oww;
    private bool RO = false;
    private int FFID;
    private Dictionary<string, int>? ttx, tts, ttd;

    private void CheckTTX(ref int? id, ref string? adx, string? oadx)
    {
        if (ttx!.TryGetValue(adx!, out var nid))
        {
            id = nid;
        }
        else
        {
            adx = oadx;
        }
    }

    private void CheckTTS(ref int? id, ref string? adx, string? oadx)
    {
        if (tts!.TryGetValue(adx!, out var nid))
        {
            id = nid;
        }
        else
        {
            adx = oadx;
        }
    }

    private void CheckTTD(ref int? id, ref string? adx, string? oadx)
    {
        if (ttd!.TryGetValue(adx!, out var nid))
        {
            id = nid;
        }
        else
        {
            adx = oadx;
        }
    }

    private void Cancel()
    {
        //RLCVsource?.NotifyChangedAsync();

        // zaten buradan geri dönecek, ilk değerlerini geri almaya gerek yok. ww = oww Bu çalışmaz birbirine eşitliyor copy yapmıyor;
        // ww = oww.ShallowCopy(); //Gerekirse bu OK 
        OnCancelled.InvokeAsync();
    }

    private void Clone()
    {
        ww.WWID = 0;
    }

    private void NewRec()
    {
        ww = new();
        oww = new();
    }

    private void Save()
    {
        var ppm = new   // Sirasi onemli Procedure Input sirasiyla ayni olmali
        {
            WWID = ww.WWID,
            USRID = rLCV.UsrId,
            FFID = rLCV.FrmId,
            SBJID = ww.SbjID,
            RWHOID = ww.mWhoID,
            RINF = ww.rInf,
            MDPTID = ww.mDptID,
            MWHOID = ww.mWhoID,
            SCNTID = ww.sCntID,
            SADRID = ww.sAdrID,
            SINF = ww.sInf,
            SED = ww.SED,
            SAD = ww.SAD,
            SADOK = 1,
            FCNTID = ww.fCntID,
            FADRID = ww.fAdrID,
            FINF = ww.fInf,
            FED = ww.FED,
            FAD = ww.FAD,
            FADOK = 0,
            DCNTID = ww.dCntID,
            DADRID = ww.dAdrID,
            DINF = ww.dInf
        };

        db.SaveRec("WW_MDF", ppm);
        OnSaved.InvokeAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        FFID = rLCV.FrmId;
        var tt = db.LoadData<TT, dynamic>("select * from TT_LU(@FFID)", new { FFId = FFID });
        ttx = new();
        tts = new();
        ttd = new();
        foreach(var r in tt)
        {
            if(r.Typ == "X")
            {
                ttx.Add(r.AdX, r.TTId);
            }
            else if(r.Typ == "S")
            {
                tts.Add(r.AdX, r.TTId);
            }
            if(r.Typ == "D")
            {
                ttd.Add(r.AdX, r.TTId);
            }
        }

        //ttx = db.LoadData<TT, dynamic>("select * from TT_LU(@FFID) where Typ='X'", new { FFId = FFID }).ToDictionary((k) => k.AdX);

        //if (ScpC.IsAdm || ScpC.IsTnm)
        ww = db.LoadRec<WW, dynamic>("select * from WW_SEL(@WWId,@FFId,@UsrId)", new { WWId=ID, FFId=FFID, UsrId=1 });
        // else
        // NM.NavigateTo("login");
        //pp = db.LoadRec<PP, dynamic>("select * from PP where PPId = @PPId", new { PPId = PPId });
        oww = ww.ShallowCopy();
    }

    private sealed class TT
    {
        public int TTId { get; set; }
        public string Typ { get; set; }
        public string AdX { get; set; }
    }

}
