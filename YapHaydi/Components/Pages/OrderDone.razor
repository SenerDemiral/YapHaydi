@inject IDataAccess db
@inject IDbCon dbCon

@rendermode @(new InteractiveServerRenderMode(prerender: false))

@page "/orderdone"

<WwQry OnQryArgsSelected="@QryArgsSelected" />
@* <WwQry OnQryArgsSelected="@QryArgsSelected" Qry="qry" /> *@

@if (ww != null)
{
	<table class="mx-auto text-left text-gray-500 @pointerEvent">
		<thead class="text-xs text-gray-700 bg-gray-50">
			<tr class="text-center bg-orange-600 text-white">
				<th></th>
				<th></th>
				<th class="font-thin">Id</th>
				<th class="font-thin">Konu</th>
				<th class="font-thin">İsteyen</th>
				<th class="font-thin">YapanDpt</th>
				<th class="font-thin">YapanKişi</th>
				<th class="font-thin">Başlangıç</th>
				<th class="font-thin">±S</th>
				<th class="font-thin">Bitiş</th>
				<th class="font-thin">±S</th>
			</tr>
		</thead>
		<tbody>
			@{
				int i = 1;
			}
			@foreach (var w in ww)
			{
				<tr>
					<td class="pr-1 text-right text-red-600">@(i++)</td>
					<td class="border border-slate-300">
						<button class="bg-indigo-500 text-white rounded px-1"
								@onclick="() => ShowModal(w.WWID)">
							<span class="material-symbols-outlined">input</span>
						</button>
					</td>
					<td class="border border-slate-300 px-1 text-right">@w.WWID</td>
					<td class="border border-slate-300 px-1">@w.Sbj</td>
					<td class="border border-slate-300 px-1">@w.rWho</td>
					<td class="border border-slate-300 px-1">@w.mDpt</td>
					<td class="border border-slate-300 px-1">@w.mWho</td>
					<td class="border border-slate-300 px-1">@w.SADfs</td>
					<td class="border border-slate-300 px-1 text-right">@w.sdh</td>
					<td class="border border-slate-300 px-1">@w.FADfs</td>
					<td class="border border-slate-300 px-1 text-right">@w.fdh</td>
				</tr>
			}
		</tbody>
	</table>
}

@if (showModal)
{
    <div class="modal modal-ww shadow-lg shadow-black rounded">
        <InpWW ID=@mdlId OnSaved="Saved" OnCancelled="Cancelled" />
    </div>
}


@code {
	[CascadingParameter]
	public AppState appState { get; set; }

	IEnumerable<WW> ww;
	//public WwQryArgs qry = new();

	private int mdlId;
	private string pointerEvent = "pe-auto";

	private bool _showModal;
	private bool showModal
	{
		get => _showModal;
		set
		{
			_showModal = value;
			pointerEvent = _showModal ? "pe-none" : "pe-auto";
		}
	}
	private void ShowModal(int id)
	{
		if (showModal)
			showModal = false;
		else
		{
			this.mdlId = id;
			showModal = true;
		}
	}
	public void Cancelled()
	{
		showModal = false;
	}
	public void Saved()
	{
		showModal = false;
		LoadData();
	}


	public void QryArgsSelected()
	{
		LoadData();
	}

	// public void QryArgsSelected(WwQryArgs qryArgs)
	// {
	// 	//qry = qryArgs;
	// 	LoadData();
	// }

	private void LoadData()
	{
		var prms = new
		{
			FFID = appState.FrmId,
			RngFld = appState.rngFld,
			RngGE = appState.rngGE,
			RngLT = appState.rngLT,
			FltFld = appState.fltFld,
			FltCnd = appState.fltCnd,
			FltVal = appState.fltVal,
			OrdFld = appState.ordFld,
			OrdVal = appState.ordVal
		};
		using (IDbConnection conn = dbCon.GetConnection())
		{
			ww = conn.Query<WW>("WW_QRY", prms, commandType: CommandType.StoredProcedure);
		}

		//using var conn = dbCon.GetConnection();
		//pp = conn.Query<WW>("select * from WW_QRY(@FFID,@RNGFLD,@RNGGE,@RNGLT,@FLTFLD,@FLTCND,@FLTVAL,@ORDFLD,@ORDVAL)", qry ).AsQueryable();
		//ww = conn.Query<WW>("WW_QRY", prms, commandType: CommandType.StoredProcedure).AsQueryable();

		//pp = db.LoadData<WW, dynamic>("select * from WW_QRY(@FFID,)", qry).AsQueryable();
	}

	protected override void OnParametersSet()
	{
		if (appState.UsrId > 0 && appState.Ytk1)
			LoadData();
		base.OnParametersSet();
	}

}
