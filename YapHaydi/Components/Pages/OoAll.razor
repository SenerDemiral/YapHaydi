@inject IDbCon dbCon

@rendermode @(new InteractiveServerRenderMode(prerender: false))

@page "/ooall"

@* <WwQry OnQryArgsSelected="@QryArgsSelected" /> *@
@* <WwQry OnQryArgsSelected="@QryArgsSelected" Qry="qry" /> *@

@if (oo != null)
{
	<table class="mx-auto text-left text-gray-500 @pointerEvent">
		<thead class="text-xs text-gray-700 bg-gray-50">
			<tr class="text-center bg-orange-600 text-white">
				<th></th>
				<th></th>
				<th class="font-thin">Konu</th>
				<th class="font-thin">İsteyen</th>
				<th class="font-thin">Yapan</th>
				<th class="font-thin">Başlangıç</th>
				<th class="font-thin">Bitiş</th>
			</tr>
			<tr>
				<th></th>
				<th class="border border-slate-300 px-1 text-center">
					<button type="button" @onclick="QryArgsSelected">🔎</button>
				</th>
				<th class="border border-slate-300 px-1 font-thin">
					<input type="text"
						   maxlength="30"
						   size="15"
						   list="TTSL"
						   @bind="sSbj"
						   @bind:event="onchange"
						   @bind:after="(() => CheckTTS(ref sSbjId, ref sSbj))" />
				</th>
				<th class="border border-slate-300 px-1 font-thin">
					<input type="text"
						   maxlength="30"
						   size="15"
						   list="TTXL"
						   @bind="sReq"
						   @bind:event="onchange"
						   @bind:after="(() => CheckTTX(ref sReqId, ref sReq))" />
				</th>
				<th class="border border-slate-300 px-1 font-thin">
					<input type="text"
						   maxlength="30"
						   size="15"
						   list="TTXL"
						   @bind="sAct"
						   @bind:event="onchange"
						   @bind:after="(() => CheckTTX(ref sActId, ref sAct))" />
				</th>
				<th></th>
				<th></th>
			</tr>
		</thead>
		<tbody>
			@{
				int i = 1;
			}
			@foreach (var o in oo)
			{
				<tr>
					<td class="pr-1 text-right text-red-600">@(i++)</td>
					<td class="border border-slate-300">
						<button class="bg-indigo-500 text-white rounded px-1"
								@onclick="() => ShowModal(o.OOID)">
							<span class="material-symbols-outlined">input</span>
							<sup class="text-[.5rem]">@o.OOID</sup>
						</button>
					</td>
					<td class="border border-slate-300 px-1">@o.Sbj</td>
					<td class="border border-slate-300 px-1">@o.Req</td>
					<td class="border border-slate-300 px-1">@o.Act</td>

					@if (o.Started)
					{
						<td class="border border-slate-300 px-1">
							@o.ASDfs
							<span class="material-symbols-outlined">done</span>
							<sup>@o.sdh</sup>
						</td>
					}
					else
					{
						<td class="border border-slate-300 text-center">
							<button class="bg-indigo-500 text-white rounded px-1" @onclick="() => Started(o)">
								@o.RSDfs
							</button>
						</td>
					}

					@if (o.Finishhed)
					{
						<td class="border border-slate-300 px-1">
							@o.AFDfs
							<span class="material-symbols-outlined">done</span>
							<sup>@o.fdh</sup>
						</td>
					}
					else
					{
						<td class="border border-slate-300 text-center">
							<button class="bg-indigo-500 text-white rounded px-1" @onclick="() => Finished(o)">
								@o.RFDfs
							</button>
						</td>
					}

					@if (o.UpdatePending)
					{
						<td>
							<button class="bg-indigo-500 text-white rounded px-1" @onclick="() => UpdRec(o)">
								<span class="material-symbols-outlined">checklist_rtl</span>
							</button>
						</td>
					}

				</tr>
			}
		</tbody>
	</table>

	<datalist id="TTXL">
		@foreach (var r in ttx!)
		{
			<option value="@r.Key" />
		}
	</datalist>

	<datalist id="TTSL">
		@foreach (var r in tts!)
		{
			<option value="@r.Key" />
		}
	</datalist>
}

@if (showModal)
{
	<div class="modal modal-ww shadow-lg shadow-black rounded">
		<InpOO ID=@mdlId OnSaved="Saved" OnCancelled="Cancelled" />
	</div>
}


@code {
	[CascadingParameter]
	public AppState appState { get; set; }

	IEnumerable<OO> oo;

	private Dictionary<string, int?>? ttx, tts;
	private string sSbj;
	private string sReq;
	private string sAct;
	private int sSbjId = -1;
	private int sReqId = -1;
	private int sActId = -1;

	private int mdlId;
	private string pointerEvent = "pe-auto";

	private void CheckTTS(ref int id, ref string? adx)
	{
		if (tts!.TryGetValue(adx, out var nid))
		{
			id = (int)nid;
		}
		else
		{
			id = -1;
			adx = "";
		}
	}
	private void CheckTTX(ref int id, ref string? adx)
	{
		if (ttx!.TryGetValue(adx, out var nid))
		{
			id = (int)nid;
		}
		else
		{
			id = -1;
			adx = "";
		}
	}

	private bool _showModal;
	private bool showModal
	{
		get => _showModal;
		set
		{
			_showModal = value;
			pointerEvent = _showModal ? "pe-none" : "pe-auto";
		}
	}
	private void ShowModal(int id)
	{
		if (showModal)
			showModal = false;
		else
		{
			this.mdlId = id;
			showModal = true;
		}
	}
	public void Cancelled()
	{
		showModal = false;
	}
	public void Saved()
	{
		showModal = false;
		LoadData();
	}

	public void Started(OO o)
	{
		o.ASD = DateTime.Now;
		o.UpdateSoF = 1;
		o.UpdatePending = true;
	}
	public void Finished(OO o)
	{
		if (o.ASD is null)
			o.ASD = DateTime.Now;

		o.AFD = DateTime.Now;
		o.UpdateSoF = 2;
		o.UpdatePending = true;
	}
	public void UpdRec(OO o)
	{
		string S_F = "";
		if (o.UpdateSoF == 1)
			S_F = "S";
		else if (o.UpdateSoF == 2)
			S_F = "F";

		//var xx = db.LoadRec<XX, dynamic>("select * from OO_UPD_SF(@OOID, @S_F)", new { OOID = o.OOID, S_F = S_F });
		using var conn = dbCon.GetConnection();
		var xx = conn.QueryFirst<XX>("OO_UPD_SF", new { OOID = o.OOID, S_F = S_F }, commandType: CommandType.StoredProcedure);
		o.ASD = xx.ASD;
		o.AFD = xx.AFD;
		o.sdh = xx.SDH;
		o.fdh = xx.FDH;

		o.UpdatePending = false;
	}



	public void QryArgsSelected()
	{
		LoadData();
	}

	private void LoadData()
	{
		var prms = new
		{
			FFID = appState.FrmId,
			RngFld = "InsTS",
			RngGE = DateTime.Today.AddDays(-10),
			RngLT = DateTime.Today.AddDays(1),
			S1F = "SbjId",
			S1V = sSbjId,
			S2F = "ReqId",
			S2V = sReqId,
			S3F = "ActId",
			S3V = sActId,
		};
		using (IDbConnection conn = dbCon.GetConnection())
		{
			oo = conn.Query<OO>("OO_QRY", prms, commandType: CommandType.StoredProcedure);
		}

		//using var conn = dbCon.GetConnection();
		//pp = conn.Query<WW>("select * from WW_QRY(@FFID,@RNGFLD,@RNGGE,@RNGLT,@FLTFLD,@FLTCND,@FLTVAL,@ORDFLD,@ORDVAL)", qry ).AsQueryable();
		//ww = conn.Query<WW>("WW_QRY", prms, commandType: CommandType.StoredProcedure).AsQueryable();

		//pp = db.LoadData<WW, dynamic>("select * from WW_QRY(@FFID,)", qry).AsQueryable();
	}

	protected override void OnParametersSet()
	{
		if (appState.UsrId > 0 && appState.Ytk1)
		{
			LoadLookups();
			LoadData();
		}
		base.OnParametersSet();
	}

	private void LoadLookups()
	{
		ttx = new();
		tts = new();

		tts.Add("", -1);	// tümü
		tts.Add("-boş-", 0);
		ttx.Add("", -1);
		ttx.Add("-boş-", 0);

		if (appState.Ytk1)
		{
			using var conn = dbCon.GetConnection();
			var tt = conn.Query<TT>("select * from TT_LU(@FFID)", new { FFId = appState.FrmId });

			foreach (var r in tt)
			{
				if (r.Typ == "X")
				{
					ttx.Add(r.AdX, r.TTId);
				}
				else if (r.Typ == "S")
				{
					tts.Add(r.AdX, r.TTId);
				}
			}
		}
	}


	public sealed class XX
	{
		public DateTime? ASD;
		public DateTime? AFD;
		public int SDH;
		public int FDH;
	}

	private sealed class TT
	{
		public int TTId { get; set; }
		public string Typ { get; set; }
		public string AdX { get; set; }
	}

}
