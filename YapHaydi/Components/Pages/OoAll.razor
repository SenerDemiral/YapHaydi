@rendermode @(new InteractiveServerRenderMode(prerender: false))

@inject IDbCon dbCon

@page "/ooall"

@* <WwQry OnQryArgsSelected="@QryArgsSelected" /> *@
@* <WwQry OnQryArgsSelected="@QryArgsSelected" Qry="qry" /> *@

@if (oo != null)
{
	<div class="m-1">
		@{
			int j = 1;
		}
		@foreach (var o in oo)
		{
			<div class="oGrid">
				<div class="oBox oRecNo">@(j++)</div>

				@if (o.hasOrdAlert)
				{
					<div class="oBox oDtyBtn bg-amber-500">
						<button @onclick="() => ShowModal(o.OOID)">
							<span class="material-symbols-outlined text-xl">topic</span>
							@* <sup class="text-[.5rem]">@o.OOID</sup> *@
						</button>
					</div>
				}
				else
				{
					<div class="oBox oDtyBtn">
						<button @onclick="() => ShowModal(o.OOID)">
							<span class="material-symbols-outlined text-xl">topic</span>
							@* <sup class="text-[.5rem]">@o.OOID</sup> *@
						</button>
					</div>
				}

				@if (o.hasMsgAlert)
				{
					<div class="oBox oMsjBtn bg-red-500">
						<button @onclick="() => ShowModal(o.OOID)">
							<span class="material-symbols-outlined text-xl">mail</span>
							<sup>@o.AlrtM</sup>
						</button>
					</div>
				}
				else
				{
					<div class="oBox oMsjBtn bg-indigo-500">
						<button @onclick="() => ShowModal(o.OOID)">
							<span class="material-symbols-outlined">mail</span>
						</button>
					</div>
				}

				<div class="oBox oSbj">@o.Sbj<span class="topleft">konu</span></div>
				<div class="oBox oReq">@o.Req<div class="topleft">istek</div></div>
				<div class="oBox oAct">@o.Act<div class="topleft">yapan</div></div>

				<div class="oBox oStart">
					@if (o.Started)
					{
						@o.ASDfs
						<span class="material-symbols-outlined text-xs">done</span>
						<sup>@o.sdh</sup>
					}
					else
					{
						<button class="bg-indigo-500 text-white rounded px-1" @onclick="() => Started(o)">
							@o.RSDfs
						</button>
					}
					<div class="topleft">başlangıç</div>
				</div>

				<div class="oBox oFinish">
					@if (o.Finishhed)
					{
						@o.AFDfs
						<span class="material-symbols-outlined text-xs">done</span>
						<sup>@o.fdh</sup>
					}
					else
					{
						<button class="bg-indigo-500 text-white rounded px-1" @onclick="() => Finished(o)">
							@o.RFDfs
						</button>
					}
				</div>

				<div class="oBox oConfirm">
					@if (o.UpdatePending)
					{
						<button @onclick="() => UpdRec(o)">
							<span class="material-symbols-outlined ml-4 text-green-500">done</span>
						</button>
					}
					@if (o.UpdateSoF > 0)
					{
						<button @onclick="() => CancelPending(o)">
							<span class="material-symbols-outlined mr-4 text-red-500">close</span>
						</button>
					}
				</div>
			</div>
		}
	</div>

	<table class="mx-auto text-left text-gray-500 @pointerEvent">
		<thead class="text-xs text-gray-700 bg-gray-50">
			<tr>
				<th colspan="2" class="border border-slate-300 text-center">
					<span class="material-symbols-outlined">warning</span>

					<input type="checkbox" @bind="AlertOnly" />
				</th>
				<th class="border border-slate-300 px-1 text-center">
					<button type="button" @onclick="QryArgsSelected">🔎</button>
				</th>
				<th class="border border-slate-300 px-1 font-thin">
					<input type="text"
						   maxlength="30"
						   size="15"
						   list="TSL"
						   @bind="sSbj"
						   @bind:event="onchange"
						   @bind:after="CheckSbj" />
				</th>
				<th class="border border-slate-300 px-1 font-thin">
					<input type="text"
						   maxlength="30"
						   size="15"
						   list="TRL"
						   @bind="sReq"
						   @bind:event="onchange"
						   @bind:after="CheckReq" />
				</th>
				<th class="border border-slate-300 px-1 font-thin">
					<input type="text"
						   maxlength="30"
						   size="15"
						   list="TAL"
						   @bind="sAct"
						   @bind:event="onchange"
						   @bind:after="CheckAct" />
				</th>
				@* <th colspan="2" class="border border-slate-300"></th> *@

			</tr>
			<tr class="text-center bg-orange-600 text-white">
				<th>#</th>
				<th class="font-thin">Dty</th>
				<th class="font-thin">Msj</th>
				<th class="font-thin">Konu</th>
				<th class="font-thin">İstek</th>
				<th class="font-thin">Yapan</th>
				@* <th class="font-thin">Başlangıç</th> *@
				@* <th class="font-thin">Bitiş</th> *@
			</tr>
		</thead>
		<tbody>
			@{
				int i = 1;
			}
			@foreach (var o in oo)
			{
				<tr class="border border-slate-300">
					<td rowspan="2" class="border border-slate-300 pr-1 text-right text-red-600">@(i++)</td>
					@if (o.hasOrdAlert)
					{
						<td rowspan="2" class="border border-slate-300 bg-red-700 text-center">
							<button class=" text-white rounded px-1"
									@onclick="() => ShowModal(o.OOID)">
								<span class="material-symbols-outlined">maps_ugc</span>
								@* <sup class="text-[.5rem]">@o.OOID</sup> *@
							</button>
						</td>
					}
					else
					{
						<td rowspan="2" class="border border-slate-300 bg-indigo-500 text-center">
							<button class=" text-white rounded px-1"
									@onclick="() => ShowModal(o.OOID)">
								<span class="material-symbols-outlined">outbound</span>
								@* <sup class="text-[.5rem]">@o.OOID</sup> *@
							</button>
						</td>
					}
					@if (o.hasMsgAlert)
					{
						<td rowspan="2" class="bg-amber-500 text-center">
							<button class="text-white rounded px-1"
									@onclick="() => ShowModal(o.OOID)">
								<span class="material-symbols-outlined">mail</span>
								@o.AlrtM
							</button>
						</td>
					}
					else
					{
						<td rowspan="2" class="border border-slate-300 bg-indigo-500 text-center">
							<button class="text-white rounded px-1"
									@onclick="() => ShowModal(o.OOID)">
								<span class="material-symbols-outlined">mail</span>
							</button>
						</td>
					}

					<td class="border border-slate-300 px-1">@o.Sbj</td>
					<td class="border border-slate-300 px-1">@o.Req</td>
					<td class="border border-slate-300 px-1">@o.Act</td>
				</tr>
				<tr>
					<td colspan="1" class="border border-slate-300"></td>
					@if (o.Started)
					{
						<td class="border border-slate-300 px-1">
							@o.ASDfs
							<span class="material-symbols-outlined">done</span>
							<sup>@o.sdh</sup>
						</td>
					}
					else
					{
						<td class="border border-slate-300 text-center">
							<button class="bg-indigo-500 text-white rounded px-1" @onclick="() => Started(o)">
								@o.RSDfs
							</button>
						</td>
					}

					@if (o.Finishhed)
					{
						<td class="border border-slate-300 px-1">
							@o.AFDfs
							<span class="material-symbols-outlined">done</span>
							<sup>@o.fdh</sup>
						</td>
					}
					else
					{
						<td class="border border-slate-300 text-center">
							<button class="bg-indigo-500 text-white rounded px-1" @onclick="() => Finished(o)">
								@o.RFDfs
							</button>
						</td>
					}

					@if (o.UpdatePending)
					{
						<td>
							<button @onclick="() => UpdRec(o)">
								✔️
							</button>
						</td>
					}
					@if (o.UpdateSoF > 0)
					{
						<td>
							<button @onclick="() => CancelPending(o)">
								❌
							</button>
						</td>
					}
				</tr>
			}
		</tbody>
	</table>

	<datalist id="TSL">
		@foreach (var r in tsd!)
		{
			<option value="@r.Key" />
		}
	</datalist>

	<datalist id="TRL">
		@foreach (var r in trd!)
		{
			<option value="@r.Key" />
		}
	</datalist>

	<datalist id="TAL">
		@foreach (var r in tad!)
		{
			<option value="@r.Key" />
		}
	</datalist>
}

@if (showModal)
{
	<div class="modal modal-ww shadow-lg shadow-black rounded">
		<InpOO ID=@mdlId OnSaved="Saved" OnCancelled="Cancelled" />
	</div>
}


@code {
	[CascadingParameter]
	public AppState appState { get; set; }

	private bool alertOnly = true;
	public bool AlertOnly
	{
		get => alertOnly;
		set { alertOnly = value; }
	}

	IEnumerable<OO> oo;
	private IEnumerable<TS> ts;
	private IEnumerable<TR> tr;
	private IEnumerable<TA> ta;
	private Dictionary<string, int?>? tsd, trd, tad;

	private string sSbj;
	private string sReq;
	private string sAct;
	private int sSbjId = -1;
	private int sReqId = -1;
	private int sActId = -1;

	private int mdlId;
	private string pointerEvent = "pe-auto";

	private void CheckSbj()
	{
		if (tsd!.TryGetValue(sSbj, out int? nid))
			sSbjId = (int)nid;
		else
		{
			sSbjId = -1;
			sSbj = "";
		}
	}
	private void CheckReq()
	{
		if (trd!.TryGetValue(sReq, out var nid))
			sReqId = (int)nid;
		else
		{
			sReqId = -1;
			sReq = "";
		}
	}
	private void CheckAct()
	{
		if (tad!.TryGetValue(sAct, out var nid))
			sActId = (int)nid;
		else
		{
			sActId = -1;
			sAct = "";
		}
	}

	private bool _showModal;
	private bool showModal
	{
		get => _showModal;
		set
		{
			_showModal = value;
			pointerEvent = _showModal ? "pe-none" : "pe-auto";
		}
	}
	private void ShowModal(int id)
	{
		if (showModal)
			showModal = false;
		else
		{
			this.mdlId = id;
			showModal = true;
		}
	}
	public void Cancelled()
	{
		showModal = false;
	}
	public void Saved()
	{
		showModal = false;
		LoadData();
	}

	public void Started(OO o)
	{
		o.ASD = DateTime.Now;
		o.UpdateSoF = 1;
		o.UpdatePending = true;
	}
	public void Finished(OO o)
	{
		o.AFD = DateTime.Now;
		o.UpdateSoF += 2;
		o.UpdatePending = true;

		if (o.ASD is null)
		{
			o.UpdateSoF = 3;
			o.ASD = DateTime.Now;
		}
	}
	public void CancelPending(OO o)
	{
		if (o.UpdateSoF == 1)
		{
			o.ASD = null;
		}
		else if (o.UpdateSoF == 2)
		{
			o.AFD = null;
		}
		else if (o.UpdateSoF == 3)
		{
			o.ASD = null;
			o.AFD = null;
		}
		o.UpdateSoF = 0;
		o.UpdatePending = false;
	}
	public void UpdRec(OO o)
	{
		string S_F = o.UpdateSoF == 1 ? "S" : "F";

		//var xx = db.LoadRec<XX, dynamic>("select * from OO_UPD_SF(@OOID, @S_F)", new { OOID = o.OOID, S_F = S_F });
		using var conn = dbCon.GetConnection();
		var xx = conn.QueryFirst<XX>("OO_UPD_SF", new { OOID = o.OOID, USRID = appState.UsrId, S_F = S_F }, commandType: CommandType.StoredProcedure);
		o.ASD = xx.ASD;
		o.AFD = xx.AFD;
		o.sdh = xx.SDH;
		o.fdh = xx.FDH;

		o.UpdateSoF = 0;
		o.UpdatePending = false;
	}

	public void QryArgsSelected()
	{
		LoadData();
	}

	protected override void OnParametersSet()
	{
		//if (appState.UsrId > 0 && appState.IsFrm)
		if (appState.UsrId > 0)
		{
			LoadLookups();
			LoadData();
		}
		base.OnParametersSet();
	}

	private void LoadData()
	{
		if (appState.IsYpn)  // Yapan ise sadece onunkilerini göster
			sActId = appState.UsrId;

		var prms = new
		{
			FFID = appState.FrmId,
			UsrId = 29,  // appState.UsrId,
			RngFld = "UpdTS",
			RngGE = DateTime.Today.AddDays(-100),
			RngLT = DateTime.Today.AddDays(1),
			S1F = "SbjId",
			S1V = sSbjId,
			S2F = "ReqId",
			S2V = sReqId,
			S3F = "ActId",
			S3V = sActId,
		};

		using (IDbConnection conn = dbCon.GetConnection())
		{
			if (AlertOnly)
				oo = conn.Query<OO>("select * from OO_QRY(@FFID,@USRID,@RNGFLD,@RNGGE,@RNGLT,@S1F,@S1V,@S2F,@S2V,@S3F,@S3V) where AlrtO > 0 or AlrtM > 0", prms);
			else
				oo = conn.Query<OO>("OO_QRY", prms, commandType: CommandType.StoredProcedure);
		}
	}

	private void LoadLookups()
	{
		tsd = new();
		trd = new();
		tad = new();

		tsd.Add("", -1);    // tümü
		tsd.Add("-boş-", 0);
		trd.Add("", -1);
		trd.Add("-boş-", 0);
		tad.Add("", -1);
		tad.Add("-boş-", 0);

		if (appState.IsFrm)
		{
			using var conn = dbCon.GetConnection();

			ts = conn.Query<TS>("select * from TS where FFId = @FFId", new { FFId = appState.FrmId });
			foreach (var r in ts)
			{
				trd.Add(r.Ad, r.TSID);
			}
			tr = conn.Query<TR>("select * from TR where FFId = @FFId", new { FFId = appState.FrmId });
			foreach (var r in tr)
			{
				trd.Add(r.Ad, r.TRID);
			}
			ta = conn.Query<TA>("select * from TA where FFId = @FFId", new { FFId = appState.FrmId });
			foreach (var r in ta)
			{
				tad.Add(r.Ad, r.TAID);
			}
		}
	}

	public sealed class XX
	{
		public DateTime? ASD;
		public DateTime? AFD;
		public int SDH;
		public int FDH;
	}

	private sealed class TT
	{
		public int TTId { get; set; }
		public string Typ { get; set; }
		public string AdX { get; set; }
	}

}

