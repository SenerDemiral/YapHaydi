@inject IDataAccess db
@inject IDbCon dbCon

@rendermode @(new InteractiveServerRenderMode(prerender: false))

@page "/ooall"

@* <WwQry OnQryArgsSelected="@QryArgsSelected" /> *@
@* <WwQry OnQryArgsSelected="@QryArgsSelected" Qry="qry" /> *@

@if (oo != null)
{
	<table class="mx-auto text-left text-gray-500 @pointerEvent">
		<thead class="text-xs text-gray-700 bg-gray-50">
			<tr class="text-center bg-orange-600 text-white">
				<th></th>
				<th></th>
				<th class="font-thin">Id</th>
				<th class="font-thin">Konu</th>
				<th class="font-thin">İsteyen</th>
				<th class="font-thin">YapanDpt</th>
				<th class="font-thin">YapanKişi</th>
				<th class="font-thin">Başlangıç</th>
				<th class="font-thin">±S</th>
				<th class="font-thin">Bitiş</th>
				<th class="font-thin">±S</th>
			</tr>
		</thead>
		<tbody>
			@{
				int i = 1;
			}
			@foreach (var o in oo)
			{
				<tr>
					<td class="pr-1 text-right text-red-600">@(i++)</td>
					<td class="border border-slate-300">
						<button class="bg-indigo-500 text-white rounded px-1"
								@onclick="() => ShowModal(o.OOID)">
							<span class="material-symbols-outlined">input</span>@o.OOID
						</button>
					</td>
					<td class="border border-slate-300 px-1 text-right">@o.OOID</td>
					<td class="border border-slate-300 px-1">@o.Sbj</td>
					<td class="border border-slate-300 px-1">@o.Req</td>
					<td class="border border-slate-300 px-1">@o.Act</td>
					<td class="border border-slate-300 px-1">@o.ASDfs</td>
					<td class="border border-slate-300 px-1 text-right">@o.sdh</td>
					<td class="border border-slate-300 px-1">@o.AFDfs</td>
					<td class="border border-slate-300 px-1 text-right">@o.fdh</td>
				</tr>
			}
		</tbody>
	</table>
}

@if (showModal)
{
	<div class="modal modal-ww shadow-lg shadow-black rounded">
		<InpOO ID=@mdlId OnSaved="Saved" OnCancelled="Cancelled" />
	</div>
}


@code {
	[CascadingParameter]
	public AppState appState { get; set; }

	IEnumerable<OO> oo;

	private int mdlId;
	private string pointerEvent = "pe-auto";

	private bool _showModal;
	private bool showModal
	{
		get => _showModal;
		set
		{
			_showModal = value;
			pointerEvent = _showModal ? "pe-none" : "pe-auto";
		}
	}
	private void ShowModal(int id)
	{
		if (showModal)
			showModal = false;
		else
		{
			this.mdlId = id;
			showModal = true;
		}
	}
	public void Cancelled()
	{
		showModal = false;
	}
	public void Saved()
	{
		showModal = false;
		LoadData();
	}

	public void QryArgsSelected()
	{
		LoadData();
	}

	private void LoadData()
	{
		var prms = new
		{
			FFID = 101,
			RngFld = "RQD",
			RngGE = DateTime.Today.AddDays(-10),
			RngLT = DateTime.Today.AddDays(1),
			S1F = "SbjId",
			S1V = 1,
			S2F = "",
			S2V = 0,
			S3F = "",
			S3V = 0,
		};
		using (IDbConnection conn = dbCon.GetConnection())
		{
			oo = conn.Query<OO>("OO_QRY", prms, commandType: CommandType.StoredProcedure);
		}

		//using var conn = dbCon.GetConnection();
		//pp = conn.Query<WW>("select * from WW_QRY(@FFID,@RNGFLD,@RNGGE,@RNGLT,@FLTFLD,@FLTCND,@FLTVAL,@ORDFLD,@ORDVAL)", qry ).AsQueryable();
		//ww = conn.Query<WW>("WW_QRY", prms, commandType: CommandType.StoredProcedure).AsQueryable();

		//pp = db.LoadData<WW, dynamic>("select * from WW_QRY(@FFID,)", qry).AsQueryable();
	}

	protected override void OnParametersSet()
	{
		if (appState.UsrId > 0 && appState.Ytk1)
			LoadData();
		base.OnParametersSet();
	}

}
