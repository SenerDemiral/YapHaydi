@rendermode @(new InteractiveServerRenderMode(prerender: false))

@inject IDbCon dbCon

@page "/ooall"

@* <WwQry OnQryArgsSelected="@QryArgsSelected" /> *@
@* <WwQry OnQryArgsSelected="@QryArgsSelected" Qry="qry" /> *@

@if (oo != null)
{
	<div class="mx-1">
		<div class="flex justify-center">
			<button @onclick="ToggleQry">
				<span class="material-symbols-outlined text-xl text-red-500">swap_vertical_circle</span>
			</button>
		</div>

		<div class="@(HideQuery ? "hidden" : string.Empty)">
			<table class="mx-auto text-left text-gray-500 @pointerEvent">
				<tr>
					<td class="border border-slate-300 px-1 font-thin">Filtre</td>
					<td class="border border-slate-300 px-1">
						<InputRadioGroup @bind-Value="ftyp">
							<InputRadio Value="@("0")" />Hepsi &nbsp;
							<InputRadio Value="@("1")" />Yeniler &nbsp;
							<InputRadio Value="@("2")" />Başlamamış &nbsp;
							<InputRadio Value="@("3")" />Bitmemiş
						</InputRadioGroup>
					</td>
				</tr>
				<tr>
					<td class="border border-slate-300 px-1 font-thin">Konu</td>
					<td class="border border-slate-300 px-1">
						<input type="text"
							   maxlength="30"
							   size="15"
							   list="TSL"
							   @bind="sSbj"
							   @bind:event="onchange"
							   @bind:after="CheckSbj" />
					</td>
				</tr>
				<tr>
					<td class="border border-slate-300 px-1 font-thin">İstek</td>
					<td class="border border-slate-300 px-1">
						<input type="text"
							   maxlength="30"
							   size="15"
							   list="TTL"
							   @bind="sTsk"
							   @bind:event="onchange"
							   @bind:after="CheckTsk" />
					</td>
				</tr>
				<tr>
					<td class="border border-slate-300 px-1 font-thin">Yapan</td>
					<td class="border border-slate-300 px-1">
						<input type="text"
							   maxlength="30"
							   size="15"
							   list="TAL"
							   @bind="sAct"
							   @bind:event="onchange"
							   @bind:after="CheckAct" />
					</td>
				</tr>
				<tr>
					<td colspan="2" class="border border-slate-300 px-1 text-center bg-slate-100">
						<button type="button" @onclick="QryArgsSelected">🔎</button>
					</td>
				</tr>
			</table>
			<br />
		</div>


		@{
			int j = 1;
		}
		@foreach (var o in oo)
		{
			<div class="oGrid">
				<div class="oBox oRecNo">@(j++)</div>

				<div class="oBox oDtyBtn">
					<button @onclick="() => ShowModal(o.OOID)">
						<span class="material-symbols-outlined text-xl @(o.hasOrdAlert ? "text-red-500" : string.Empty)">topic</span>
					</button>
				</div>

				<div class="oBox oMsjBtn">
					<button @onclick="() => ShowModal(o.OOID)">
						@if (o.hasMsgAlert)
						{
							<span class="material-symbols-outlined text-xl text-red-500">
								mail<span class="-left-1 text-xs">@o.AlrtM</span>
							</span>
						}
						else
						{
							<span class="material-symbols-outlined text-xl">mail</span>
						}
					</button>
				</div>

				<div class="oBox oSbj">@o.Sbj<span class="topleft">konu</span></div>
				<div class="oBox oReq">@o.Tsk<span class="topleft">görev</span></div>
				<div class="oBox oAct">@o.Act<span class="topleft">yapan</span></div>

				<div class="oBox oStart">
					@if (o.Started)
					{
						@o.ASDfs
						<span class="material-symbols-outlined text-xs">done</span>
						<sup class="text-[10px]">@o.sdh</sup>
					}
					else
					{
						<button class="bg-indigo-500 text-white rounded px-1" @onclick="() => Started(o)">
							@o.RSDfs
						</button>
					}
					<div class="topleft">başlangıç</div>
				</div>

				<div class="oBox oFinish">
					@if (o.Finishhed)
					{
						@o.AFDfs
						<span class="material-symbols-outlined text-xs">done</span>
						<sup class="text-[10px]">@o.fdh</sup>
					}
					else
					{
						<button class="bg-indigo-500 text-white rounded px-1" @onclick="() => Finished(o)">
							@o.RFDfs
						</button>
					}
					<div class="topleft">bitiş</div>
				</div>

				<div class="oBox oConfirm">
					@if (o.UpdatePending)
					{
						<button @onclick="() => UpdRec(o)">
							<span class="material-symbols-outlined ml-4 text-green-500">done</span>
						</button>
					}
					@if (o.UpdateSoF > 0)
					{
						<button @onclick="() => CancelPending(o)">
							<span class="material-symbols-outlined mr-4 text-red-500">close</span>
						</button>
					}
				</div>
			</div>
		}
	</div>

	<datalist id="TSL">
		@foreach (var r in tsd!)
		{
			<option value="@r.Key" />
		}
	</datalist>

	<datalist id="TTL">
		@foreach (var r in ttd!)
		{
			<option value="@r.Key" />
		}
	</datalist>

	<datalist id="TAL">
		@foreach (var r in tad!)
		{
			<option value="@r.Key" />
		}
	</datalist>
}

@if (showModal)
{
	<div class="modal modal-ww shadow-lg shadow-black rounded">
		<InpOO ID=@mdlId OnSaved="Saved" OnCancelled="Cancelled" />
	</div>
}


@code {
	[CascadingParameter]
	public AppState appState { get; set; }

	public string ftyp { get; set; } = "1";
	private bool HideQuery { get; set; } = true;

	private bool alertOnly = true;
	public bool AlertOnly
	{
		get => alertOnly;
		set { alertOnly = value; }
	}

	IEnumerable<OO> oo;
	private IEnumerable<TS> ts;
	private IEnumerable<TT> tt;
	private IEnumerable<TA> ta;
	private Dictionary<string, int?>? tsd, ttd, tad;

	private string sSbj;
	private string sTsk;
	private string sAct;
	private int sSbjId = -1;
	private int sTskId = -1;
	private int sActId = -1;

	private int mdlId;
	private string pointerEvent = "pe-auto";

	private void ToggleQry()
	{
		HideQuery = !HideQuery;
	}

	private void CheckSbj()
	{
		if (tsd!.TryGetValue(sSbj, out int? nid))
			sSbjId = (int)nid;
		else
		{
			sSbjId = -1;
			sSbj = "";
		}
	}
	private void CheckTsk()
	{
		if (ttd!.TryGetValue(sTsk, out var nid))
			sTskId = (int)nid;
		else
		{
			sTskId = -1;
			sTsk = "";
		}
	}
	private void CheckAct()
	{
		if (tad!.TryGetValue(sAct, out var nid))
			sActId = (int)nid;
		else
		{
			sActId = -1;
			sAct = "";
		}
	}

	private bool _showModal;
	private bool showModal
	{
		get => _showModal;
		set
		{
			_showModal = value;
			pointerEvent = _showModal ? "pe-none" : "pe-auto";
		}
	}
	private void ShowModal(int id)
	{
		if (showModal)
			showModal = false;
		else
		{
			this.mdlId = id;
			showModal = true;
		}
	}
	public void Cancelled()
	{
		showModal = false;
	}
	public void Saved()
	{
		showModal = false;
		LoadData();
	}

	public void Started(OO o)
	{
		o.ASD = DateTime.Now;
		o.UpdateSoF = 1;
		o.UpdatePending = true;
	}
	public void Finished(OO o)
	{
		o.AFD = DateTime.Now;
		o.UpdateSoF += 2;
		o.UpdatePending = true;

		if (o.ASD is null)
		{
			o.UpdateSoF = 3;
			o.ASD = DateTime.Now;
		}
	}
	public void CancelPending(OO o)
	{
		if (o.UpdateSoF == 1)
		{
			o.ASD = null;
		}
		else if (o.UpdateSoF == 2)
		{
			o.AFD = null;
		}
		else if (o.UpdateSoF == 3)
		{
			o.ASD = null;
			o.AFD = null;
		}
		o.UpdateSoF = 0;
		o.UpdatePending = false;
	}
	public void UpdRec(OO o)
	{
		string S_F = o.UpdateSoF == 1 ? "S" : "F";

		//var xx = db.LoadRec<XX, dynamic>("select * from OO_UPD_SF(@OOID, @S_F)", new { OOID = o.OOID, S_F = S_F });
		using var conn = dbCon.GetConnection();
		var xx = conn.QueryFirst<XX>("OO_UPD_SF", new { OOID = o.OOID, USRID = appState.UsrId, S_F = S_F }, commandType: CommandType.StoredProcedure);
		o.ASD = xx.ASD;
		o.AFD = xx.AFD;
		o.sdh = xx.SDH;
		o.fdh = xx.FDH;

		o.UpdateSoF = 0;
		o.UpdatePending = false;
	}

	public void QryArgsSelected()
	{
		LoadData();
		HideQuery = true;
	}

	protected override void OnParametersSet()
	{
		//if (appState.UsrId > 0 && appState.IsFrm)
		if (appState.UsrId > 0)
		{
			LoadLookups();
			LoadData();
		}
		base.OnParametersSet();
	}

	private void LoadData()
	{
		if (appState.IsYpn)  // Yapan ise sadece onunkilerini göster
			sActId = appState.UsrId;

		var prms = new
		{
			FFID = appState.FrmId,
			UsrId = 29,  // appState.UsrId,
			RngFld = "UpdTS",
			RngGE = DateTime.Today.AddDays(-100),
			RngLT = DateTime.Today.AddDays(1),
			S1F = "SbjId",
			S1V = sSbjId,
			S2F = "TskId",
			S2V = sTskId,
			S3F = "ActId",
			S3V = sActId,
		};

		using (IDbConnection conn = dbCon.GetConnection())
		{
			if (ftyp == "0")
				oo = conn.Query<OO>("OO_QRY", prms, commandType: CommandType.StoredProcedure);
			else if (ftyp == "1")
				oo = conn.Query<OO>("select * from OO_QRY(@FFID,@USRID,@RNGFLD,@RNGGE,@RNGLT,@S1F,@S1V,@S2F,@S2V,@S3F,@S3V) where AlrtO > 0 or AlrtM > 0", prms);
			else if (ftyp == "2")
				oo = conn.Query<OO>("select * from OO_QRY(@FFID,@USRID,@RNGFLD,@RNGGE,@RNGLT,@S1F,@S1V,@S2F,@S2V,@S3F,@S3V) where ASD is null", prms);
			else if (ftyp == "3")
				oo = conn.Query<OO>("select * from OO_QRY(@FFID,@USRID,@RNGFLD,@RNGGE,@RNGLT,@S1F,@S1V,@S2F,@S2V,@S3F,@S3V) where AFD is null", prms);
		}
	}

	private void LoadLookups()
	{
		tsd = new();
		ttd = new();
		tad = new();

		tsd.Add("", -1);    // tümü
		tsd.Add("-boş-", 0);
		ttd.Add("", -1);
		ttd.Add("-boş-", 0);
		tad.Add("", -1);
		tad.Add("-boş-", 0);

		if (appState.IsFrm)
		{
			using var conn = dbCon.GetConnection();

			ts = conn.Query<TS>("select * from TS where FFId = @FFId", new { FFId = appState.FrmId });
			foreach (var r in ts)
			{
				ttd.Add(r.Ad, r.TSID);
			}
            tt = conn.Query<TT>("select * from TT where FFId = @FFId", new { FFId = appState.FrmId });
			foreach (var r in tt)
			{
				ttd.Add(r.Ad, r.TRID);
			}
			ta = conn.Query<TA>("select * from TA where FFId = @FFId", new { FFId = appState.FrmId });
			foreach (var r in ta)
			{
				tad.Add(r.Ad, r.TAID);
			}
		}
	}

	public sealed class XX
	{
		public DateTime? ASD;
		public DateTime? AFD;
		public int SDH;
		public int FDH;
	}

}

